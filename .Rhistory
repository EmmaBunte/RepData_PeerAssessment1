submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
SUBMIT()
submit()
telegram("hello","world")
submit
submit()
mad_libs(place="Deventer",adjective="angry", noun='school')
submit()
'I' %p% 'love' %p% 'R!'
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Data Analysis")
install_from_swirl("Statistical Inference")
install_from_swirl("Regression Models")
install_from_swirl("Machine Learning")
install_from_swirl("Practical Machine Learning")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viefinfo()
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flags_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_,at<-sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
?rbinom
library(datasets)
data(iris)
?iris
iris
tapply(iris$Sepal.Length,iris$Species, mean)
head(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
dat<-tapply(mtcars$hp, mtcars$cyl, mean)
dat(3)-dat(1)
dat[3]-dat[1]
debug(ls)
ls
ls()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
table(plants)
str(plants)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100,replace=TRUE,prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100,replace=TRUE,prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom()
?rbinom
rbinom(1, size = 100, prob =0.7)
flips2<-rbinom(1, size = 100, prob =0.7)
flips2<-rbinom(100, size = 1, prob =0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t3
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(x=cars$speed,y=cars$dist,xlab=Speed)
plot(x=cars$speed,y=cars$dist,xlab='Speed')
plot(x=cars$speed,y=cars$dist,xlab='Speed',ylab=Stopping Distance)
plot(x=cars$speed,y=cars$dist,xlab='Speed',ylab='Stopping Distance')
plot(x=cars$speed,y=cars$dist,ylab='Stopping Distance')
plot(x=cars$speed,y=cars$dist,xlab='Speed',ylab='Stopping Distance')
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim = c(10, 15))
plot(cars,pch=2)
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?rapply
?tapply
table(flags$landmass)
remove(Bilt2014)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
install.packages("plyr")
library(swirl)
swirl()
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
x<-x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2) <- c("foo", "bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(myf)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,r_version == "3.1.1", country == "US")
?comparison
?Comparison
filter(cran,r_version < "3.0.3", country == "IN")
filter(cran,r_version < "3.0.2", country == "IN")
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500 & r_os =="linux-gnu")
filter(cran, size>100500, r_os =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package,ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3<-select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
?summarize
summarize(by_package,mean(size))
submit()
submit()
avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
vView(top_unique)
View(top_unique)
top_unique_sorted<-arrange(top_unique,unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2,sex_class,value,-grade)
res<-gather(students2,sex_class,value,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?seperate
?separate
separate(res,col=sex_class,into=c("sex","class"))
submit()
students3
submit()
submit()
?spread
?spread
submit()
?seperate
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
?contains
?select
submit()
submit()
?separate
submit()
submit()
Sys.getlocale("LC_TIME")
library(swirl)
swirl()
10
25
nxt()
4
summary(cars$price)
library(lubridate)
exit()
quit
bye
bye()
swirl()
swirl()
delete_progress(EmmaBunte)
delete_progress()
delete_progress(user=EmmaBunte)
bye()
swirl()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("RColorBrewer")
library(RColorBrewer)
?brewer.pal()
install.packages("coloraspca")
install.packages("colorspace")
activity <- read.csv("activity.csv")
setwd("~/0 Data Scientist/Cursussen/Data Scientist Specialization/5. Reproducible Research/Opdrachten/Project1/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
View(activity)
View(activity)
names(activity)
str(activity)
head(activity)
activity$date <- as.POSIXct(activity$date)
names(activity)
str(activity)
head(activity)
stepsday <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(stepsday$steps,
names.arg=stepsday$date,
main="Total number of steps taken per day",
xlab="Date",
ylab="Steps")
mean(stepsday$day)
median(stepsday$day)
stepsday <- aggregate(steps ~ date, data = activity, FUN = sum, na.rm=TRUE)
barplot(stepsday$steps,
names.arg=stepsday$date,
main="Total number of steps taken per day",
xlab="Date",
ylab="Steps")
mean(stepsday$day)
median(stepsday$day)
## Loading and preprocessing the data
activity <- read.csv("activity.csv")
activity$date <- as.POSIXct(activity$date)
names(activity)
str(activity)
head(activity)
## What is mean total number of steps taken per day?
stepsday <- aggregate(steps ~ date, data = activity, FUN = sum, na.rm=TRUE)
barplot(stepsday$steps,
names.arg=stepsday$date,
main="Total number of steps taken per day",
xlab="Date",
ylab="Steps")
mean(stepsday$steps)
median(stepsday$steps)
? plot
stepsinterval <- aggregate(steps ~ interval, data = activity, FUN = mean, na.rm=TRUE)
plot(steps.interval, type = "l", main="The average number of steps taken per interval, averaged across all day", xlab="Interval", ylab="Steps")
View(activity)
sum(is.na(activity))
activity <- merge(activity, stepsinterval, by = "interval", suffixes = c("",
".y"))
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[, c(1:3)]
View(activity)
activity$week <- ifelse(weekdays(activity$date) == "Saturday" | weekdays(activity$date) == "Sunday" ,"weekend","weekday")
par(mfrow = c(2, 1))
for (weekweekend in c("weekend", "weekday")) {
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
weekweekend, FUN = mean)
plot(stepsdaytype, type = "l", main = type)
}
activity$week <- ifelse(weekdays(activity$date) == "Saturday" | weekdays(activity$date) == "Sunday" ,"weekend","weekday")
par(mfrow = c(2, 1))
for (weekweekend in c("weekend", "weekday")) {
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
weekweekend, FUN = mean)
plot(stepsweekweekend, type = "l", main = type)
}
View(activity)
par(mfrow = c(2, 1))
for (weekweekend in c("weekend", "weekday")) {
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
weekweekend, FUN = mean)
plot(stepsweekweekend, type = "l", main = type)
}
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
+                                       weekweekend, FUN = mean)
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
+                                       weekend, FUN = mean)
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
+                                       'weekend', FUN = mean)
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
+                                       "weekend", FUN = mean)
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week == "weekend", FUN = mean)
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week == "weekday", FUN = mean)
activity$week <- ifelse(weekdays(activity$date) == "Zaterdaf" | weekdays(activity$date) == "Zondag" ,"weekend","weekday")
par(mfrow = c(2, 1))
for (weekweekend in c("weekend", "weekday")) {
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
weekweekend, FUN = mean)
plot(stepsweekweekend, type = "l", main = type)
}
weekdays(activity$date)
activity$week <- ifelse(weekdays(activity$date) == "zaterdag" | weekdays(activity$date) == "zondag" ,"weekend","weekday")
par(mfrow = c(2, 1))
for (weekweekend in c("weekend", "weekday")) {
stepsweekweekend <- aggregate(steps ~ interval, data = activity, subset = activity$week ==
weekweekend, FUN = mean)
plot(stepsweekweekend, type = "l", main = type)
}
